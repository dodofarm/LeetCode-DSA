169.majority-element.py - Boyer Moore Algorithm, voting
151.reverse-words-in-a-string.py - never done/understood fully
1540.can-convert-string-in-k-moves.py - String conversion
215.kth-largest-element-in-an-array.py - Quickselect practice, optional max heap or just sort
283.move-zeroes.py - Think about how to partition the array, what needs to be at the beginning? Maybe move it there
347.top-k-frequent-elements.py - Bucket Sort, find highest frequency
125.valid-palindrome.py - think about how you DON'T have to move both pointers before comparing, you can do so 1 by 1!
219.contains-duplicate-ii.py - Solved but not optimal think of which TECHNIQUE to use, hashmap is only part of it
15.3sum.py - didn't solve this one, think of 2sum and 2sum II
567.permutation-in-string.py - got non-linear time solution, keep in mind exactly HOW sliding windows work (pop, add per move)

repeate one more time:
3.longest-substring-without-repeating-characters.py - done but took too long and had unnessecary code (not optimized)
98.validate-binary-search-tree.py - solved with a tip, try again. If you've found the conditions for a BST, try to simplify them to something managable
100.same-tree.py - solved but with big problems - should be easy. Just simplify, no need to do null checks, it's just as fast to do that in a recursive call and return immediately.
121.best-time-to-buy-and-sell-stock.py - done with hint, simple question - understand what you are measuring and which simple comparison you need
143.reorder-list.py - got it but pretty ineffiecient, think of the easiest way to find the middle of a linked list, think of another problem where you found kth element counted from the end
146.lru-cache.py - got the technique after a hint, good question - repeat one more time. Make sure to create helper functions if needed and to check the logic, debugging can be very hard.
150.evaluate-reverse-polish-notation.py - done but the technique how and when to order numbers to stack should be revised
189.rotate-array.py - solved but no O(1) space complexity, hard to come up with technique write the start and result and retry maybe
205.isomorphic-strings.py - solved once with hint, you need to compare one string with the other AND vice versa
226.invert-binary-tree.py - same as 104, figured out technique but maybe no need for helper function? Just call the main function.
235.lowest-common-ancestor-of-a-binary-search-tree.py - solved but solution was not most efficient, think about the core idea of what the path before the split is, just follow it.
875.koko-eating-bananas.py - figured out after tip, remember how binary search works and WHAT you are searching for in this quesiton, set the lowest, highest points for binary search correctly
1448.count-good-nodes-in-binary-tree.py - got it after looking at a tip TWICE, try again a third time! retry both - recursive and iterative solution. This about what information should be on the call stack and how to pass it down/modify it.
1470.shuffle-the-array.py - easy, solved - there's a more complex bitshift solution where you store 2 values in one int, maybe attempt to do that

Done:
2.add-two-numbers.py - done but not good time and non-efficiencies in code - think how you can write cleaner/smarter and shorter, remove unnessecary lines
19.remove-nth-node-from-end-of-list.py - done but code might want some optimizations (unnessecary None checks etc.)
20.valid-parentheses.py - done on second try, might repeat since there is a nice concept on how to compare values
21.merge-two-sorted-lists.py - done, maybe repeat for understanding
26.remove-duplicates-from-sorted-array.py - solved perfectly, some small hiccups like unnessecary variables etc.
27.remove-element.py - done perfectly, small issues like unnessecary variables
49.group-anagrams.py - done with sort and non-sort approach - maybe retry without coding to come up with non code appraoch
74.search-a-2d-matrix.py - done with no issues, maybe repeat for understanding of binary search application?
102.binary-tree-level-order-traversal.py - done with little to no issues, maybe repeat to understand some logic stuff - edit: redone with BFS, maybe repeat to understand dequeue BFS
104.maximum-depth-of-binary-tree.py - done with recursive DFS and stack DFS, redo stack solution potentially to solidify stack technique
138.copy-list-with-random-pointer.py - done once with a hint and once by remembering. Great technique used to map objects to one another. Maybe repeat wihtout coding and code if needed? think about how you can identify what Node points to which other objects, using the val wont work, why?
155.min-stack.py - done, remember CORE idea about how stack works! think of how to store the min value for the current element
167.two-sum-ii-input-array-is-sorted.py - actually solved without problems, might retry to refresh
199.binary-tree-right-side-view.py - done with custom recursive solution as in 102 (recursive) - also now redone with BFS + deque
206.reverse-linked-list.py - Solved on second try (remember to use multiple vars, not one!) maybe as training to recursive solution
344.reverse-string.py - done, not really worth repeating unless for basic techniques
438.find-all-anagrams-in-a-string.py - done on first try - very similar to 567, maybe repeat with better implementation
643.maximum-average-subarray-i.py - done on first try - maybe repeat to solidify static size sliding window
682.baseball-game.py - done perfectly on first try
704.binary-search.py - done, maybe repeat to practice binary search but other problems probably are enough for that
1472.design-browser-history.py - solved with linked list, maybe reattempt but this time use an array?
1929.concatenation-of-array.py - no need to repeat, very simple
